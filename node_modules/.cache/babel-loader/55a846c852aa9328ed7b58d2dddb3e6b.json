{"ast":null,"code":"var _jsxFileName = \"/Users/viswassaripalli/Desktop/music/src/CardRow.js\";\nimport React from \"react\";\nimport \"./card.css\";\nimport Modal from \"react-modal\";\n\nclass CardRow extends React.Component {\n  constructor() {\n    super();\n\n    this.toggletrack = () => {\n      var url = \"http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=1860cfefc2bccd102f8437ff38667f0f&mbid=\" + this.props.track.mbid + \"&format=json\";\n      fetch(url).then(function (response) {\n        return response.json();\n      }).then(data => {\n        console.log(data);\n\n        if (data.message !== \"Track not found\") {\n          this.setState({\n            albumtitle: data.track.album.title,\n            albumlistener: data.track.listeners,\n            albumcount: data.track.playcount,\n            toptags: data.track.toptags.tag,\n            albumpublished: data.track.wiki.published,\n            albumcontent: data.track.wiki.summary\n          });\n        } else {\n          this.setState({\n            message: data.message\n          });\n        }\n      });\n      this.setState({\n        isactive: !this.state.isactive\n      });\n    };\n\n    this.toggleModal = () => {\n      var data;\n      var url = \"http://ws.audioscrobbler.com/2.0/?method=artist.getInfo&api_key=1860cfefc2bccd102f8437ff38667f0f&mbid=\" + this.props.track.artist.mbid + \"&format=json\";\n      fetch(url).then(function (response) {\n        return response.json();\n      }).then(data => {\n        console.log(data);\n        this.setState({\n          image: data.artist.image[4][\"#text\"],\n          listener: data.artist.stats.listeners,\n          count: data.artist.stats.playcount,\n          tag: data.artist.tags.tag,\n          publish: data.artist.bio.published,\n          similar: data.artist.similar.artist,\n          content: data.artist.bio.summary\n        });\n      });\n      this.setState({\n        active: !this.state.active\n      });\n      console.log(this.props.track.name);\n    };\n\n    this.state = {\n      message: \"\",\n      active: false,\n      isactive: false,\n      image: \"\",\n      listerner: \"\",\n      count: \"\",\n      tag: [],\n      publish: \"\",\n      similar: [],\n      content: \"\",\n      albumtitle: \"\",\n      albumlistener: \"\",\n      albumcount: \"\",\n      toptags: [],\n      albumpublished: \"\",\n      albumcontent: \"\"\n    };\n  }\n\n  componentWillMount() {\n    Modal.setAppElement(\"body\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      onClick: this.toggletrack,\n      src: this.props.track.image[2][\"#text\"],\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      onClick: this.toggletrack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.props.track.name), React.createElement(\"a\", {\n      onClick: this.toggleModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.props.track.artist.name), React.createElement(Modal, {\n      isOpen: this.state.active,\n      onRequestClose: this.toggleModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        marginLeft: \"40%\"\n      },\n      src: this.state.image,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.props.track.artist.name), React.createElement(\"h3\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.listener, React.createElement(\"span\", {\n      style: {\n        color: \"orange\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \" Listerners \"), \"    \", this.state.count, React.createElement(\"span\", {\n      style: {\n        color: \"orange\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \" playcounts\")), React.createElement(\"ul\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.state.tag.map(item => React.createElement(\"button\", {\n      style: {\n        background: \"orange\"\n      },\n      key: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, item.name))), React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Published On\", \" \", React.createElement(\"span\", {\n      style: {\n        color: \"orange\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.publish)), React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\",\n        color: \"orange\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Related artist\"), React.createElement(\"ul\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, this.state.similar.map(item => React.createElement(\"button\", {\n      style: {\n        background: \"orange\"\n      },\n      key: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, item.name))), React.createElement(\"p\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, this.state.content), React.createElement(\"button\", {\n      style: {\n        textAlign: \"center\",\n        marginLeft: \"45%\"\n      },\n      onClick: this.toggleModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Close\")), React.createElement(Modal, {\n      isOpen: this.state.isactive,\n      onRequestClose: this.toggletrack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"if(this.state.message!=\\\"Track not found\\\")\", React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        marginLeft: \"40%\"\n      },\n      src: this.props.track.image[3][\"#text\"],\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.props.track.name), React.createElement(\"h3\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Album\", React.createElement(\"span\", {\n      style: {\n        color: \"orange\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \" \", this.state.albumtitle, \" \"), \"Artist\", React.createElement(\"span\", {\n      style: {\n        color: \"orange\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \" \", this.props.track.artist.name)), React.createElement(\"h3\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, this.state.albumlistener, React.createElement(\"span\", {\n      style: {\n        color: \"orange\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \" Listerners \"), \"    \", this.state.albumcount, React.createElement(\"span\", {\n      style: {\n        color: \"orange\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \" playcounts\")), React.createElement(\"ul\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, this.state.toptags.map(item => React.createElement(\"button\", {\n      style: {\n        background: \"orange\"\n      },\n      key: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, item.name))), React.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Published On\", \" \", React.createElement(\"span\", {\n      style: {\n        color: \"orange\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.state.albumpublished)), React.createElement(\"p\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, this.state.albumcontent)), \"if(this.state.message==\\\"Track not found\\\")\", React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, this.state.message), React.createElement(\"button\", {\n      style: {\n        textAlign: \"center\",\n        marginLeft: \"45%\"\n      },\n      onClick: this.toggletrack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Close\")));\n  }\n\n}\n\nexport default CardRow;","map":{"version":3,"sources":["/Users/viswassaripalli/Desktop/music/src/CardRow.js"],"names":["React","Modal","CardRow","Component","constructor","toggletrack","url","props","track","mbid","fetch","then","response","json","data","console","log","message","setState","albumtitle","album","title","albumlistener","listeners","albumcount","playcount","toptags","tag","albumpublished","wiki","published","albumcontent","summary","isactive","state","toggleModal","artist","image","listener","stats","count","tags","publish","bio","similar","content","active","name","listerner","componentWillMount","setAppElement","render","marginLeft","textAlign","color","map","item","background"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AACA,MAAMC,OAAN,SAAsBF,KAAK,CAACG,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAwBdC,WAxBc,GAwBA,MAAM;AAClB,UAAIC,GAAG,GACL,0GACA,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,IADjB,GAEA,cAHF;AAIAC,MAAAA,KAAK,CAACJ,GAAD,CAAL,CACGK,IADH,CACQ,UAASC,QAAT,EAAmB;AACvB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHH,EAIGF,IAJH,CAIQG,IAAI,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,YAAIA,IAAI,CAACG,OAAL,KAAiB,iBAArB,EAAwC;AACtC,eAAKC,QAAL,CAAc;AACZC,YAAAA,UAAU,EAAEL,IAAI,CAACN,KAAL,CAAWY,KAAX,CAAiBC,KADjB;AAEZC,YAAAA,aAAa,EAAER,IAAI,CAACN,KAAL,CAAWe,SAFd;AAGZC,YAAAA,UAAU,EAAEV,IAAI,CAACN,KAAL,CAAWiB,SAHX;AAIZC,YAAAA,OAAO,EAAEZ,IAAI,CAACN,KAAL,CAAWkB,OAAX,CAAmBC,GAJhB;AAKZC,YAAAA,cAAc,EAAEd,IAAI,CAACN,KAAL,CAAWqB,IAAX,CAAgBC,SALpB;AAOZC,YAAAA,YAAY,EAAEjB,IAAI,CAACN,KAAL,CAAWqB,IAAX,CAAgBG;AAPlB,WAAd;AASD,SAVD,MAUO;AACL,eAAKd,QAAL,CAAc;AACZD,YAAAA,OAAO,EAAEH,IAAI,CAACG;AADF,WAAd;AAGD;AACF,OArBH;AAsBA,WAAKC,QAAL,CAAc;AACZe,QAAAA,QAAQ,EAAE,CAAC,KAAKC,KAAL,CAAWD;AADV,OAAd;AAGD,KAtDa;;AAAA,SAwDdE,WAxDc,GAwDA,MAAM;AAClB,UAAIrB,IAAJ;AACA,UAAIR,GAAG,GACL,2GACA,KAAKC,KAAL,CAAWC,KAAX,CAAiB4B,MAAjB,CAAwB3B,IADxB,GAEA,cAHF;AAIAC,MAAAA,KAAK,CAACJ,GAAD,CAAL,CACGK,IADH,CACQ,UAASC,QAAT,EAAmB;AACvB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHH,EAIGF,IAJH,CAIQG,IAAI,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,aAAKI,QAAL,CAAc;AACZmB,UAAAA,KAAK,EAAEvB,IAAI,CAACsB,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqB,OAArB,CADK;AAEZC,UAAAA,QAAQ,EAAExB,IAAI,CAACsB,MAAL,CAAYG,KAAZ,CAAkBhB,SAFhB;AAGZiB,UAAAA,KAAK,EAAE1B,IAAI,CAACsB,MAAL,CAAYG,KAAZ,CAAkBd,SAHb;AAIZE,UAAAA,GAAG,EAAEb,IAAI,CAACsB,MAAL,CAAYK,IAAZ,CAAiBd,GAJV;AAKZe,UAAAA,OAAO,EAAE5B,IAAI,CAACsB,MAAL,CAAYO,GAAZ,CAAgBb,SALb;AAMZc,UAAAA,OAAO,EAAE9B,IAAI,CAACsB,MAAL,CAAYQ,OAAZ,CAAoBR,MANjB;AAOZS,UAAAA,OAAO,EAAE/B,IAAI,CAACsB,MAAL,CAAYO,GAAZ,CAAgBX;AAPb,SAAd;AASD,OAhBH;AAiBA,WAAKd,QAAL,CAAc;AACZ4B,QAAAA,MAAM,EAAE,CAAC,KAAKZ,KAAL,CAAWY;AADR,OAAd;AAGA/B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWC,KAAX,CAAiBuC,IAA7B;AACD,KAnFa;;AAEZ,SAAKb,KAAL,GAAa;AACXjB,MAAAA,OAAO,EAAE,EADE;AAEX6B,MAAAA,MAAM,EAAE,KAFG;AAGXb,MAAAA,QAAQ,EAAE,KAHC;AAIXI,MAAAA,KAAK,EAAE,EAJI;AAKXW,MAAAA,SAAS,EAAE,EALA;AAMXR,MAAAA,KAAK,EAAE,EANI;AAOXb,MAAAA,GAAG,EAAE,EAPM;AAQXe,MAAAA,OAAO,EAAE,EARE;AASXE,MAAAA,OAAO,EAAE,EATE;AAUXC,MAAAA,OAAO,EAAE,EAVE;AAWX1B,MAAAA,UAAU,EAAE,EAXD;AAYXG,MAAAA,aAAa,EAAE,EAZJ;AAaXE,MAAAA,UAAU,EAAE,EAbD;AAcXE,MAAAA,OAAO,EAAE,EAdE;AAeXE,MAAAA,cAAc,EAAE,EAfL;AAgBXG,MAAAA,YAAY,EAAE;AAhBH,KAAb;AAkBD;;AACDkB,EAAAA,kBAAkB,GAAG;AACnBhD,IAAAA,KAAK,CAACiD,aAAN,CAAoB,MAApB;AACD;;AA8DDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,OAAO,EAAE,KAAK9C,WADhB;AAEE,MAAA,GAAG,EAAE,KAAKE,KAAL,CAAWC,KAAX,CAAiB6B,KAAjB,CAAuB,CAAvB,EAA0B,OAA1B,CAFP;AAGE,MAAA,GAAG,EAAC,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME;AAAI,MAAA,OAAO,EAAE,KAAKhC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgC,KAAKE,KAAL,CAAWC,KAAX,CAAiBuC,IAAjD,CANF,EAQE;AAAG,MAAA,OAAO,EAAE,KAAKZ,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+B,KAAK5B,KAAL,CAAWC,KAAX,CAAiB4B,MAAjB,CAAwBW,IAAvD,CARF,EASE,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAE,KAAKb,KAAL,CAAWY,MAA1B;AAAkC,MAAA,cAAc,EAAE,KAAKX,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,KAAK,EAAE;AAAEiB,QAAAA,UAAU,EAAE;AAAd,OAAZ;AAAmC,MAAA,GAAG,EAAE,KAAKlB,KAAL,CAAWG,KAAnD;AAA0D,MAAA,GAAG,EAAC,EAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAI,MAAA,KAAK,EAAE;AAAEgB,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK9C,KAAL,CAAWC,KAAX,CAAiB4B,MAAjB,CAAwBW,IAD3B,CAFF,EAKE;AAAI,MAAA,KAAK,EAAE;AAAEM,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnB,KAAL,CAAWI,QADd,EAEE;AAAM,MAAA,KAAK,EAAE;AAAEgB,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGG,MAHH,EAIG,KAAKpB,KAAL,CAAWM,KAJd,EAKE;AAAM,MAAA,KAAK,EAAE;AAAEc,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALF,CALF,EAYE;AAAI,MAAA,KAAK,EAAE;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnB,KAAL,CAAWP,GAAX,CAAe4B,GAAf,CAAmBC,IAAI,IACtB;AAAQ,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAf;AAAyC,MAAA,GAAG,EAAED,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAACT,IADR,CADD,CADH,CAZF,EAoBE;AAAI,MAAA,KAAK,EAAE;AAAEM,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACe,GADf,EAEE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmC,KAAKpB,KAAL,CAAWQ,OAA9C,CAFF,CApBF,EAwBE;AAAI,MAAA,KAAK,EAAE;AAAEW,QAAAA,SAAS,EAAE,QAAb;AAAuBC,QAAAA,KAAK,EAAE;AAA9B,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAxBF,EA2BE;AAAI,MAAA,KAAK,EAAE;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnB,KAAL,CAAWU,OAAX,CAAmBW,GAAnB,CAAuBC,IAAI,IAC1B;AAAQ,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAf;AAAyC,MAAA,GAAG,EAAED,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAACT,IADR,CADD,CADH,CA3BF,EAkCE;AAAG,MAAA,KAAK,EAAE;AAAEM,QAAAA,SAAS,EAAE;AAAb,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoC,KAAKnB,KAAL,CAAWW,OAA/C,CAlCF,EAmCE;AACE,MAAA,KAAK,EAAE;AAAEQ,QAAAA,SAAS,EAAE,QAAb;AAAuBD,QAAAA,UAAU,EAAE;AAAnC,OADT;AAEE,MAAA,OAAO,EAAE,KAAKjB,WAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAnCF,CATF,EAmDE,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAE,KAAKD,KAAL,CAAWD,QAA1B;AAAoC,MAAA,cAAc,EAAE,KAAK5B,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAE;AAAE+C,QAAAA,UAAU,EAAE;AAAd,OADT;AAEE,MAAA,GAAG,EAAE,KAAK7C,KAAL,CAAWC,KAAX,CAAiB6B,KAAjB,CAAuB,CAAvB,EAA0B,OAA1B,CAFP;AAGE,MAAA,GAAG,EAAC,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME;AAAI,MAAA,KAAK,EAAE;AAAEgB,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqC,KAAK9C,KAAL,CAAWC,KAAX,CAAiBuC,IAAtD,CANF,EAOE;AAAI,MAAA,KAAK,EAAE;AAAEM,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,EAEG,KAAKpB,KAAL,CAAWf,UAFd,EAE0B,GAF1B,CAFF,YAOE;AAAM,MAAA,KAAK,EAAE;AAAEmC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,EAEG,KAAK/C,KAAL,CAAWC,KAAX,CAAiB4B,MAAjB,CAAwBW,IAF3B,CAPF,CAPF,EAmBE;AAAI,MAAA,KAAK,EAAE;AAAEM,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnB,KAAL,CAAWZ,aADd,EAEE;AAAM,MAAA,KAAK,EAAE;AAAEgC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGG,MAHH,EAIG,KAAKpB,KAAL,CAAWV,UAJd,EAKE;AAAM,MAAA,KAAK,EAAE;AAAE8B,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALF,CAnBF,EA0BE;AAAI,MAAA,KAAK,EAAE;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnB,KAAL,CAAWR,OAAX,CAAmB6B,GAAnB,CAAuBC,IAAI,IAC1B;AAAQ,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAf;AAAyC,MAAA,GAAG,EAAED,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAACT,IADR,CADD,CADH,CA1BF,EAkCE;AAAI,MAAA,KAAK,EAAE;AAAEM,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACe,GADf,EAEE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKpB,KAAL,CAAWN,cADd,CAFF,CAlCF,EAyCE;AAAG,MAAA,KAAK,EAAE;AAAEyB,QAAAA,SAAS,EAAE;AAAb,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoC,KAAKnB,KAAL,CAAWH,YAA/C,CAzCF,CAHJ,iDAgDG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKG,KAAL,CAAWjB,OAAhB,CAhDH,EAiDE;AACE,MAAA,KAAK,EAAE;AAAEoC,QAAAA,SAAS,EAAE,QAAb;AAAuBD,QAAAA,UAAU,EAAE;AAAnC,OADT;AAEE,MAAA,OAAO,EAAE,KAAK/C,WAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAjDF,CAnDF,CADF;AA8GD;;AArMmC;;AAwMtC,eAAeH,OAAf","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\nimport Modal from \"react-modal\";\nclass CardRow extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      message: \"\",\n      active: false,\n      isactive: false,\n      image: \"\",\n      listerner: \"\",\n      count: \"\",\n      tag: [],\n      publish: \"\",\n      similar: [],\n      content: \"\",\n      albumtitle: \"\",\n      albumlistener: \"\",\n      albumcount: \"\",\n      toptags: [],\n      albumpublished: \"\",\n      albumcontent: \"\"\n    };\n  }\n  componentWillMount() {\n    Modal.setAppElement(\"body\");\n  }\n  toggletrack = () => {\n    var url =\n      \"http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=1860cfefc2bccd102f8437ff38667f0f&mbid=\" +\n      this.props.track.mbid +\n      \"&format=json\";\n    fetch(url)\n      .then(function(response) {\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n        if (data.message !== \"Track not found\") {\n          this.setState({\n            albumtitle: data.track.album.title,\n            albumlistener: data.track.listeners,\n            albumcount: data.track.playcount,\n            toptags: data.track.toptags.tag,\n            albumpublished: data.track.wiki.published,\n\n            albumcontent: data.track.wiki.summary\n          });\n        } else {\n          this.setState({\n            message: data.message\n          });\n        }\n      });\n    this.setState({\n      isactive: !this.state.isactive\n    });\n  };\n\n  toggleModal = () => {\n    var data;\n    var url =\n      \"http://ws.audioscrobbler.com/2.0/?method=artist.getInfo&api_key=1860cfefc2bccd102f8437ff38667f0f&mbid=\" +\n      this.props.track.artist.mbid +\n      \"&format=json\";\n    fetch(url)\n      .then(function(response) {\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n\n        this.setState({\n          image: data.artist.image[4][\"#text\"],\n          listener: data.artist.stats.listeners,\n          count: data.artist.stats.playcount,\n          tag: data.artist.tags.tag,\n          publish: data.artist.bio.published,\n          similar: data.artist.similar.artist,\n          content: data.artist.bio.summary\n        });\n      });\n    this.setState({\n      active: !this.state.active\n    });\n    console.log(this.props.track.name);\n  };\n\n  render() {\n    return (\n      <div className=\"card\">\n        <img\n          onClick={this.toggletrack}\n          src={this.props.track.image[2][\"#text\"]}\n          alt=\"\"\n        />\n        <h4 onClick={this.toggletrack}>{this.props.track.name}</h4>\n\n        <a onClick={this.toggleModal}>{this.props.track.artist.name}</a>\n        <Modal isOpen={this.state.active} onRequestClose={this.toggleModal}>\n          <img style={{ marginLeft: \"40%\" }} src={this.state.image} alt=\"\" />\n          <h1 style={{ textAlign: \"center\" }}>\n            {this.props.track.artist.name}\n          </h1>\n          <h3 style={{ textAlign: \"center\" }}>\n            {this.state.listener}\n            <span style={{ color: \"orange\" }}> Listerners </span>\n            {\"    \"}\n            {this.state.count}\n            <span style={{ color: \"orange\" }}> playcounts</span>\n          </h3>\n          <ul style={{ textAlign: \"center\" }}>\n            {this.state.tag.map(item => (\n              <button style={{ background: \"orange\" }} key={item}>\n                {item.name}\n              </button>\n            ))}\n          </ul>\n\n          <h1 style={{ textAlign: \"center\" }}>\n            Published On{\" \"}\n            <span style={{ color: \"orange\" }}>{this.state.publish}</span>\n          </h1>\n          <h1 style={{ textAlign: \"center\", color: \"orange\" }}>\n            Related artist\n          </h1>\n          <ul style={{ textAlign: \"center\" }}>\n            {this.state.similar.map(item => (\n              <button style={{ background: \"orange\" }} key={item}>\n                {item.name}\n              </button>\n            ))}\n          </ul>\n          <p style={{ textAlign: \"center\" }}>{this.state.content}</p>\n          <button\n            style={{ textAlign: \"center\", marginLeft: \"45%\" }}\n            onClick={this.toggleModal}\n          >\n            Close\n          </button>\n        </Modal>\n        <Modal isOpen={this.state.isactive} onRequestClose={this.toggletrack}>\n          if(this.state.message!=\"Track not found\")\n          {\n            <div>\n              <img\n                style={{ marginLeft: \"40%\" }}\n                src={this.props.track.image[3][\"#text\"]}\n                alt=\"\"\n              />\n              <h1 style={{ textAlign: \"center\" }}>{this.props.track.name}</h1>\n              <h3 style={{ textAlign: \"center\" }}>\n                Album\n                <span style={{ color: \"orange\" }}>\n                  {\" \"}\n                  {this.state.albumtitle}{\" \"}\n                </span>\n                Artist\n                <span style={{ color: \"orange\" }}>\n                  {\" \"}\n                  {this.props.track.artist.name}\n                </span>\n              </h3>\n              <h3 style={{ textAlign: \"center\" }}>\n                {this.state.albumlistener}\n                <span style={{ color: \"orange\" }}> Listerners </span>\n                {\"    \"}\n                {this.state.albumcount}\n                <span style={{ color: \"orange\" }}> playcounts</span>\n              </h3>\n              <ul style={{ textAlign: \"center\" }}>\n                {this.state.toptags.map(item => (\n                  <button style={{ background: \"orange\" }} key={item}>\n                    {item.name}\n                  </button>\n                ))}\n              </ul>\n\n              <h1 style={{ textAlign: \"center\" }}>\n                Published On{\" \"}\n                <span style={{ color: \"orange\" }}>\n                  {this.state.albumpublished}\n                </span>\n              </h1>\n\n              <p style={{ textAlign: \"center\" }}>{this.state.albumcontent}</p>\n            </div>\n          }\n          if(this.state.message==\"Track not found\")\n          {<h1>{this.state.message}</h1>}\n          <button\n            style={{ textAlign: \"center\", marginLeft: \"45%\" }}\n            onClick={this.toggletrack}\n          >\n            Close\n          </button>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default CardRow;\n"]},"metadata":{},"sourceType":"module"}