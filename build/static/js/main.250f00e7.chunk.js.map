{"version":3,"sources":["CardRow.js","Chart.js","App.js","serviceWorker.js","index.js"],"names":["CardRow","toggletrack","url","props","track","mbid","fetch","then","response","json","data","console","log","message","setState","albumtitle","album","title","albumlistener","listeners","albumcount","playcount","toptags","tag","albumpublished","wiki","published","albumcontent","summary","isactive","state","toggleModal","artist","image","listener","stats","count","tags","publish","bio","similar","content","active","name","listerner","Modal","setAppElement","className","onClick","this","src","alt","isOpen","onRequestClose","style","marginLeft","textAlign","color","map","item","background","key","React","Component","Chart","fetchapi","country","api","$","ajax","success","searchResults","results","tracks","trackRows","forEach","trackRow","push","row","error","xhr","status","err","App","useState","setCountry","c","onChange","event","target","value","myJson","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.250f00e7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\nimport Modal from \"react-modal\";\nclass CardRow extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      message: \"\",\n      active: false,\n      isactive: false,\n      image: \"\",\n      listerner: \"\",\n      count: \"\",\n      tag: [],\n      publish: \"\",\n      similar: [],\n      content: \"\",\n      albumtitle: \"\",\n      albumlistener: \"\",\n      albumcount: \"\",\n      toptags: [],\n      albumpublished: \"\",\n      albumcontent: \"\"\n    };\n  }\n  componentWillMount() {\n    Modal.setAppElement(\"body\");\n  }\n  toggletrack = () => {\n    var url =\n      \"http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=1860cfefc2bccd102f8437ff38667f0f&mbid=\" +\n      this.props.track.mbid +\n      \"&format=json\";\n    fetch(url)\n      .then(function(response) {\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n        if (data.message !== \"Track not found\") {\n          this.setState({\n            albumtitle: data.track.album.title,\n            albumlistener: data.track.listeners,\n            albumcount: data.track.playcount,\n            toptags: data.track.toptags.tag,\n            albumpublished: data.track.wiki.published,\n\n            albumcontent: data.track.wiki.summary\n          });\n        } else {\n          this.setState({\n            message: data.message\n          });\n        }\n      });\n    this.setState({\n      isactive: !this.state.isactive\n    });\n  };\n\n  toggleModal = () => {\n    var data;\n    var url =\n      \"http://ws.audioscrobbler.com/2.0/?method=artist.getInfo&api_key=1860cfefc2bccd102f8437ff38667f0f&mbid=\" +\n      this.props.track.artist.mbid +\n      \"&format=json\";\n    fetch(url)\n      .then(function(response) {\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n\n        this.setState({\n          image: data.artist.image[4][\"#text\"],\n          listener: data.artist.stats.listeners,\n          count: data.artist.stats.playcount,\n          tag: data.artist.tags.tag,\n          publish: data.artist.bio.published,\n          similar: data.artist.similar.artist,\n          content: data.artist.bio.summary\n        });\n      });\n    this.setState({\n      active: !this.state.active\n    });\n    console.log(this.props.track.name);\n  };\n\n  render() {\n    return (\n      <div className=\"card\">\n        <img\n          onClick={this.toggletrack}\n          src={this.props.track.image[2][\"#text\"]}\n          alt=\"\"\n        />\n        <h4 onClick={this.toggletrack}>{this.props.track.name}</h4>\n\n        <a onClick={this.toggleModal}>{this.props.track.artist.name}</a>\n        <Modal isOpen={this.state.active} onRequestClose={this.toggleModal}>\n          <img style={{ marginLeft: \"40%\" }} src={this.state.image} alt=\"\" />\n          <h1 style={{ textAlign: \"center\" }}>\n            {this.props.track.artist.name}\n          </h1>\n          <h3 style={{ textAlign: \"center\" }}>\n            {this.state.listener}\n            <span style={{ color: \"orange\" }}> Listerners </span>\n            {\"    \"}\n            {this.state.count}\n            <span style={{ color: \"orange\" }}> playcounts</span>\n          </h3>\n          <ul style={{ textAlign: \"center\" }}>\n            {this.state.tag.map(item => (\n              <button style={{ background: \"orange\" }} key={item}>\n                {item.name}\n              </button>\n            ))}\n          </ul>\n\n          <h1 style={{ textAlign: \"center\" }}>\n            Published On{\" \"}\n            <span style={{ color: \"orange\" }}>{this.state.publish}</span>\n          </h1>\n          <h1 style={{ textAlign: \"center\", color: \"orange\" }}>\n            Related artist\n          </h1>\n          <ul style={{ textAlign: \"center\" }}>\n            {this.state.similar.map(item => (\n              <button style={{ background: \"orange\" }} key={item}>\n                {item.name}\n              </button>\n            ))}\n          </ul>\n          <p style={{ textAlign: \"center\" }}>{this.state.content}</p>\n          <button\n            style={{ textAlign: \"center\", marginLeft: \"45%\" }}\n            onClick={this.toggleModal}\n          >\n            Close\n          </button>\n        </Modal>\n        <Modal isOpen={this.state.isactive} onRequestClose={this.toggletrack}>\n          {this.state.message != \"Track not found\" ? (\n            <div>\n              <img\n                style={{ marginLeft: \"40%\" }}\n                src={this.props.track.image[3][\"#text\"]}\n                alt=\"\"\n              />\n              <h1 style={{ textAlign: \"center\" }}>{this.props.track.name}</h1>\n              <h3 style={{ textAlign: \"center\" }}>\n                Album\n                <span style={{ color: \"orange\" }}>\n                  {\" \"}\n                  {this.state.albumtitle}{\" \"}\n                </span>\n                Artist\n                <span style={{ color: \"orange\" }}>\n                  {\" \"}\n                  {this.props.track.artist.name}\n                </span>\n              </h3>\n              <h3 style={{ textAlign: \"center\" }}>\n                {this.state.albumlistener}\n                <span style={{ color: \"orange\" }}> Listerners </span>\n                {\"    \"}\n                {this.state.albumcount}\n                <span style={{ color: \"orange\" }}> playcounts</span>\n              </h3>\n              <ul style={{ textAlign: \"center\" }}>\n                {this.state.toptags.map(item => (\n                  <button style={{ background: \"orange\" }} key={item}>\n                    {item.name}\n                  </button>\n                ))}\n              </ul>\n\n              <h1 style={{ textAlign: \"center\" }}>\n                Published On{\" \"}\n                <span style={{ color: \"orange\" }}>\n                  {this.state.albumpublished}\n                </span>\n              </h1>\n\n              <p style={{ textAlign: \"center\" }}>{this.state.albumcontent}</p>\n            </div>\n          ) : (\n            <h1 style={{ textAlign: \"center\" }}>{this.state.message}</h1>\n          )}\n\n          <button\n            style={{ textAlign: \"center\", marginLeft: \"45%\" }}\n            onClick={this.toggletrack}\n          >\n            Close\n          </button>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default CardRow;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport $ from \"jquery\";\nimport CardRow from \"./CardRow\";\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.fetchapi(this.props.country);\n  }\n  fetchapi(country) {\n    var api =\n      \"http://ws.audioscrobbler.com/2.0/?method=geo.gettoptracks&country=\" +\n      country +\n      \"&api_key=1860cfefc2bccd102f8437ff38667f0f&format=json\";\n\n    $.ajax({\n      url: api,\n      success: searchResults => {\n        console.log(\"success\");\n        const results = searchResults.tracks.track;\n        console.log(results);\n        var trackRows = [];\n        results.forEach(track => {\n          const trackRow = <CardRow track={track} />;\n          trackRows.push(trackRow);\n        });\n        this.setState({ row: trackRows });\n      },\n      error: (xhr, status, err) => console.error(\"failed to fetch\")\n    });\n  }\n\n  render() {\n    return <div className=\"chart\">{this.state.row}</div>;\n  }\n}\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Chart from \"./Chart\";\nfunction App() {\n  const [country, setCountry] = useState(\"india\");\n\n  const [state, setState] = useState(1);\n  // useEffect(() => {\n  //   // Update the document title using the browser API\n  //   fetchapi();\n  // });\n  const fetchapi = () => {\n    var api =\n      \"http://ws.audioscrobbler.com/2.0/?method=geo.gettoptracks&country=\" +\n      country +\n      \"&api_key=1860cfefc2bccd102f8437ff38667f0f&format=json\";\n\n    fetch(api)\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(myJson) {\n        // console.log(myJson);\n        setState(1);\n      });\n  };\n  var c = \"\";\n  const searchChangeHandler = event => {\n    //console.log(event.target.value);\n    c = event.target.value;\n  };\n  const clickHandler = () => {\n    setState(0);\n    fetchapi();\n    setCountry(c);\n  };\n  const Frame = props => {\n    if (props.state === 0) {\n      return (\n        <div className=\"card\">\n          <h1 style={{ textAlign: \"center\" }}>loading...</h1>\n        </div>\n      );\n    } else {\n      return <Chart country={country} />;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">top tracks in {country} </h1>\n      <select className=\"dropdown\" onChange={searchChangeHandler}>\n        <option value=\"india\">india</option>\n        <option value=\"france\">france</option>\n        <option value=\"canada\">canada</option>\n        <option value=\"china\">china</option>\n        <option value=\"greece\">greece</option>\n        <option value=\"japan\">japan</option>\n      </select>\n      <button onClick={clickHandler}>Search</button>\n      <Frame state={state} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}